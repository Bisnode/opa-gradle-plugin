plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'com.gradle.plugin-publish' version '0.15.0'
    id 'java'
    id 'checkstyle'
}

group 'com.bisnode.opa'
version '0.3.3'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.4'
    implementation 'com.bisnode.opa:opa-test-result-formatter:0.1.2'

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly files(createClasspathManifest)
}

sourceSets {
    functionalTest {
        java.srcDir file('src/testFunctional/java')
        resources.srcDir file('src/testFunctional/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

gradlePlugin {
    plugins {
        opa {
            id = 'com.bisnode.opa'
            implementationClass = 'com.bisnode.opa.OpaPlugin'
        }
    }
    testSourceSets sourceSets.functionalTest
}

pluginBundle {
    website = 'https://github.com/Bisnode/opa-gradle-plugin'
    vcsUrl = 'https://github.com/Bisnode/opa-gradle-plugin'
    description = 'Plugin adding various tasks to help out integrating Open Policy Agent (OPA) in Gradle builds.'
    tags = ['opa', 'openpolicyagent', 'test', 'testing', 'policy', 'policies', 'authorization']

    plugins {
        opa {
            displayName = 'Open Policy Agent plugin for Gradle'
        }
    }
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task functionalTest(type: Test) {
    useJUnitPlatform()
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
}
check.dependsOn functionalTest

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.ALL
}
